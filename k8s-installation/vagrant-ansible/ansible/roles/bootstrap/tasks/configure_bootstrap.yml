- name: Check if bootstrap token secret exists
  ansible.builtin.command:
    cmd: kubectl --kubeconfig={{ config_dir }}/admin.kubeconfig -n kube-system get secret bootstrap-token-{{ bootstrap_token_id }}
  register: secret_check
  failed_when: false
  changed_when: false
  when: inventory_hostname == 'master1' and not ansible_check_mode

- name: Create bootstrap token
  ansible.builtin.command:
    cmd: "kubectl --kubeconfig={{ config_dir }}/admin.kubeconfig -n kube-system create secret generic bootstrap-token-{{ bootstrap_token_id }} --type=bootstrap.kubernetes.io/token --from-literal=token-id={{ bootstrap_token_id }} --from-literal=token-secret={{ bootstrap_token_secret }} --from-literal=usage-bootstrap-authentication=true --from-literal=usage-bootstrap-signing=true"
  changed_when: true
  when: inventory_hostname == 'master1' and not ansible_check_mode and secret_check.rc != 0

- name: Create bootstrap kubeconfig
  ansible.builtin.template:
    src: bootstrap.kubeconfig.j2
    dest: "{{ bootstrap_kubeconfig }}"
    owner: root
    group: root
    mode: "0600"
  when: inventory_hostname in groups['workers']

- name: Wait for and approve all pending CSRs
  ansible.builtin.shell: |
    # Wait up to 60 seconds for CSRs to appear
    end_time=$(( $(date +%s) + 60 ))
    while [ $(date +%s) -lt $end_time ]; do
      if kubectl --kubeconfig={{ config_dir }}/admin.kubeconfig get csr -o name 2>/dev/null | grep -q .; then
        break
      fi
      sleep 2
    done

    # Approve all pending CSRs
    kubectl --kubeconfig={{ config_dir }}/admin.kubeconfig get csr -o name | xargs -r kubectl --kubeconfig={{ config_dir }}/admin.kubeconfig certificate approve
  args:
    executable: /bin/bash
  changed_when: true
  when: inventory_hostname == 'master1'
  register: csr_result
  failed_when:
    - csr_result.rc != 0
    - "'No resources found' not in csr_result.stderr"
