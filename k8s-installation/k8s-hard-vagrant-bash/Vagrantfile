# Resource configurations remain the same
RAM_SIZE = 16
CPU_CORES = 8
IP_NW = "192.168.56."

RESOURCES = {
  "master" => {
    "ram" => [3072, RAM_SIZE / 4 * 1024].min,
    "cpu" => 2
  },
  "worker" => {
    "ram" => [2048, RAM_SIZE / 6 * 1024].min,
    "cpu" => 1
  },
}

NUM_MASTER_NODES = 2
NUM_WORKER_NODES = 2
LB_RAM = 512
LB_CPU = 1

MASTER_IP_START = 10
NODE_IP_START = 20
LB_IP_START = 30
JUMP_IP_START = 40

Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/jammy64"
  config.vm.boot_timeout = 900
  config.vm.synced_folder "/media/davidshare/Tersu", "/vagrant_data"
  config.vm.box_check_update = false

  # Define jumpbox first - it will be created and provisioned immediately
  config.vm.define "jumpbox", primary: true do |node|
    node.vm.synced_folder ".", "/home/vagrant"
    node.vm.provider "virtualbox" do |vb|
      vb.name = "jumpbox"
      vb.memory = LB_RAM
      vb.cpus = LB_CPU
    end
    node.vm.hostname = "jumpbox"
    node.vm.network :private_network, ip: IP_NW + "#{JUMP_IP_START}"
    node.vm.network "forwarded_port", guest: 22, host: 2731

    # Initial jumpbox setup scripts that run immediately
    node.vm.provision "initial-setup", type: "shell", path: "scripts/01-setup-vms.sh"
    node.vm.provision "setup-hosts", type: "shell", path: "scripts/02-setup-hosts.sh"
    # node.vm.provision "setup-jumpbox", type: "shell", path: "scripts/03-setup-jumpbox.sh"
    node.vm.provision "download-binaries", type: "shell", path: "scripts/04-download-binaries.sh"
    node.vm.provision "generate-certs", type: "shell", path: "scripts/05-generate-certs.sh"
    node.vm.provision "generate-kubeconfig", type: "shell", path: "scripts/06-generate-kube-configs.sh"
    node.vm.provision "generate-encryption", type: "shell", path: "scripts/07-generate-data-encryption.sh"
    
    # This script will be triggered after all machines are up
    node.vm.provision "distribute-files", type: "shell", path: "scripts/08-distribute-files-and-configs.sh", run: "never"
    node.vm.provision "setup-networking", type: "shell", path: "scripts/12-setup-cluster-networking-and-permissions.sh", run: "never"
  end

  # Master nodes - created but not provisioned initially
  (1..NUM_MASTER_NODES).each do |i|
    config.vm.define "master0#{i}" do |node|
      node.vm.provider "virtualbox" do |vb|
        vb.name = "master0#{i}"
        vb.memory = RESOURCES["master"]["ram"]
        vb.cpus = RESOURCES["master"]["cpu"]
      end
      node.vm.hostname = "master0#{i}"
      node.vm.network :private_network, ip: IP_NW + "#{MASTER_IP_START + i}"
      node.vm.network "forwarded_port", guest: 22, host: "#{2710 + i}"
      node.vm.provision "initial-setup", type: "shell", path: "scripts/01-setup-vms.sh"
      node.vm.provision "setup-hosts", type: "shell", path: "scripts/02-setup-hosts.sh"
      node.vm.provision "setup-controller", type: "shell", path: "scripts/09-setup-controllers.sh", run: "never"
    end
  end

  # Worker nodes - created but not provisioned initially
  (1..NUM_WORKER_NODES).each do |i|
    config.vm.define "worker0#{i}" do |node|
      node.vm.provider "virtualbox" do |vb|
        vb.name = "worker0#{i}"
        vb.memory = RESOURCES["worker"]["ram"]
        vb.cpus = RESOURCES["worker"]["cpu"]
      end
      node.vm.hostname = "worker0#{i}"
      node.vm.network :private_network, ip: IP_NW + "#{NODE_IP_START + i}"
      node.vm.network "forwarded_port", guest: 22, host: "#{2720 + i}"
      node.vm.provision "initial-setup", type: "shell", path: "scripts/01-setup-vms.sh"
      node.vm.provision "setup-hosts", type: "shell", path: "scripts/02-setup-hosts.sh"
      node.vm.provision "setup-worker", type: "shell", path: "scripts/10-setup-workers.sh", run: "never"
    end
  end

  # Load balancer - created but not provisioned initially
  config.vm.define "loadbalancer" do |node|
    node.vm.provider "virtualbox" do |vb|
      vb.name = "loadbalancer"
      vb.memory = LB_RAM
      vb.cpus = LB_CPU
    end
    node.vm.hostname = "loadbalancer"
    node.vm.network :private_network, ip: IP_NW + "#{LB_IP_START}"
    node.vm.network "forwarded_port", guest: 22, host: 2732
    node.vm.provision "initial-setup", type: "shell", path: "scripts/01-setup-vms.sh"
    node.vm.provision "setup-hosts", type: "shell", path: "scripts/02-setup-hosts.sh"
    node.vm.provision "setup-lb", type: "shell", path: "scripts/11-setup-loadbalancer.sh", run: "never"
  end

  # Single trigger to handle the entire sequence
  config.trigger.after :up do |trigger|
    trigger.name = "start-provisioning-sequence"
    trigger.only_on = "loadbalancer"
    trigger.run = {
      path: "scripts/13-provision.sh"
    }
  end  
end